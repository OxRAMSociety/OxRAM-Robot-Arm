/* #include <Wire.h> */
#include <SPI.h>
#include <U8g2lib.h>

/** Resources
 *
 * Picture of pin layout (with names):
 *      https://www.waveshare.com/media/catalog/product/cache/1/image/800x800/9df78eab33525d08d6e5fb8d27136e95/l/c/lcd12864-st-3.3v-blue-4.jpg
 *
 * Note: you can test the pin association between LCD and RAMPS
 * checking for continuity with a multimeter.
 */

/* RAMPS 1.4 */
#define LED_PIN            13

/* REPRAP Discount Smart Controller */
#define LCD_CS               16 // 4th pin from the right (normally marked as RS)
#define LCD_MOSI             17 // 5th pin from the right (normally marked as R/W)
#define LCD_SCK              23 // 6th pin from the right (normally marked as E)

#define LCD_BACKLIGHT_PIN    39
#define BUZZER_PIN           37
#define SD_DETECT_PIN        49 
#define KILL_PIN             41

#define ENC1                 31
#define ENC2                 33
#define ENC                  35

/* Screen size */
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

/* OxRAM logo (XBM) */
#define OXRAM_WIDTH 83
#define OXRAM_HEIGHT 60
static unsigned char oxram_logo_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00,
   0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0xf0,
   0x80, 0x3f, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x9e, 0x03,
   0xcc, 0x01, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00,
   0x07, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x60, 0xfc, 0x07, 0x06, 0x0c,
   0x00, 0xfc, 0x01, 0x00, 0x00, 0x00, 0xb0, 0x01, 0x70, 0x00, 0x31, 0x00,
   0xfc, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x80, 0x01, 0x70, 0x00, 0xfc,
   0x01, 0x00, 0x00, 0x00, 0x0e, 0x11, 0x03, 0x46, 0xa0, 0x00, 0xfc, 0x01,
   0x00, 0x00, 0x00, 0x87, 0x00, 0x30, 0x08, 0x48, 0x01, 0xf8, 0x00, 0x00,
   0x00, 0x80, 0x03, 0x20, 0x00, 0x10, 0x10, 0x03, 0x70, 0x00, 0x00, 0x00,
   0x80, 0x00, 0x02, 0xe0, 0xff, 0x81, 0x06, 0x20, 0x00, 0x00, 0x00, 0x40,
   0x20, 0x40, 0x1c, 0x40, 0x06, 0x0d, 0x20, 0x00, 0x00, 0x00, 0xa0, 0x10,
   0x24, 0x73, 0x93, 0x30, 0x18, 0x20, 0x00, 0x00, 0x00, 0x30, 0x80, 0xd0,
   0xfe, 0x01, 0x41, 0x10, 0x20, 0x00, 0x00, 0x00, 0x10, 0x00, 0xe8, 0x87,
   0x1f, 0x80, 0x21, 0x20, 0x00, 0x00, 0x00, 0x18, 0x08, 0x71, 0x00, 0x98,
   0x12, 0x32, 0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x1a, 0x00, 0x60, 0x04,
   0x44, 0x20, 0x00, 0x00, 0x00, 0x2c, 0x20, 0x0c, 0x00, 0xc0, 0x05, 0x48,
   0x20, 0x00, 0x00, 0x00, 0x24, 0x00, 0x07, 0x00, 0x80, 0x03, 0xc1, 0x20,
   0x00, 0x00, 0x00, 0x86, 0x04, 0x03, 0x00, 0x00, 0x2b, 0xb0, 0x20, 0x00,
   0x00, 0x00, 0x02, 0x90, 0x01, 0x00, 0x00, 0x0a, 0xa0, 0x79, 0x00, 0xc0,
   0x07, 0x22, 0x80, 0x00, 0x00, 0x00, 0x1e, 0x20, 0xfd, 0x00, 0xe0, 0x07,
   0x86, 0xa0, 0x00, 0x00, 0x00, 0x0c, 0x49, 0xf9, 0x01, 0xf0, 0x03, 0x85,
   0x54, 0x00, 0x00, 0x00, 0x14, 0x81, 0xf1, 0x01, 0xf8, 0x01, 0x01, 0x60,
   0x00, 0x00, 0x00, 0x58, 0x80, 0xf1, 0x03, 0xf8, 0x01, 0x01, 0x60, 0x00,
   0x00, 0x00, 0x18, 0xa0, 0xe2, 0x07, 0xfc, 0x00, 0x21, 0x25, 0x00, 0x00,
   0x00, 0x38, 0x24, 0xc3, 0x07, 0x7c, 0x00, 0x25, 0x34, 0x00, 0x00, 0x00,
   0x18, 0x05, 0xc3, 0x0f, 0x7e, 0x00, 0x01, 0x34, 0x00, 0x00, 0x00, 0x10,
   0x00, 0x83, 0x1f, 0x3f, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x30, 0x00,
   0x83, 0x1f, 0x1f, 0x00, 0x03, 0x2a, 0x00, 0x00, 0x00, 0x38, 0x42, 0x03,
   0xbf, 0x1f, 0x00, 0x03, 0x2a, 0x00, 0x00, 0x00, 0x18, 0x42, 0x03, 0x3e,
   0x0f, 0x00, 0x13, 0x20, 0x00, 0x00, 0x00, 0x18, 0x00, 0x03, 0x7e, 0x07,
   0x00, 0x05, 0x60, 0x00, 0x00, 0x00, 0x28, 0x00, 0x03, 0xfc, 0x06, 0x00,
   0x05, 0x69, 0x00, 0x00, 0x00, 0xac, 0x80, 0x01, 0xfc, 0x00, 0x00, 0x07,
   0x60, 0x00, 0x00, 0x00, 0x04, 0x10, 0x01, 0xfc, 0x01, 0x00, 0x4a, 0xa0,
   0x00, 0x00, 0x00, 0x0e, 0x50, 0x01, 0xfc, 0x03, 0x00, 0x0a, 0xa8, 0x01,
   0x00, 0x00, 0x26, 0x80, 0x01, 0xfe, 0x03, 0x00, 0x16, 0x40, 0x01, 0x00,
   0x00, 0x83, 0x80, 0x00, 0xff, 0x07, 0x00, 0x24, 0x42, 0x03, 0x00, 0x80,
   0x05, 0xd2, 0x00, 0xff, 0x0f, 0x00, 0x4c, 0x42, 0x06, 0x00, 0xc0, 0x10,
   0xc0, 0x80, 0xdf, 0x0f, 0x00, 0x88, 0x80, 0x18, 0x00, 0xe0, 0x00, 0x68,
   0xc0, 0x8f, 0x1f, 0x00, 0x88, 0x00, 0x74, 0x00, 0x38, 0x42, 0x60, 0xc0,
   0x0f, 0x3f, 0x00, 0x30, 0x02, 0xe9, 0x03, 0x5f, 0x01, 0x21, 0xe0, 0x07,
   0x3f, 0x00, 0x50, 0x04, 0x03, 0xff, 0x2d, 0x04, 0x10, 0xf0, 0x03, 0x7e,
   0x00, 0x20, 0x18, 0xa2, 0x3d, 0x83, 0x00, 0x14, 0xf0, 0x03, 0x7c, 0x00,
   0x40, 0xc0, 0x04, 0xc0, 0x08, 0x10, 0x0a, 0xf8, 0x01, 0xfc, 0x00, 0xc0,
   0x02, 0x8f, 0x3c, 0x00, 0x01, 0x04, 0xf8, 0x00, 0xf8, 0x01, 0x80, 0x01,
   0x30, 0x80, 0x11, 0x20, 0x03, 0xfc, 0x00, 0xf0, 0x01, 0x00, 0x23, 0x20,
   0x00, 0x00, 0x84, 0x03, 0x7e, 0x00, 0xf0, 0x03, 0x00, 0x0e, 0x84, 0x00,
   0x22, 0xc2, 0x01, 0x3e, 0x00, 0xe0, 0x03, 0x00, 0x0c, 0x00, 0x03, 0x00,
   0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x1c, 0x00, 0x3e,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xc4, 0xe0, 0xff, 0x19, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x18, 0xe0, 0x01, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xc0, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


// Initialize graphics controller
U8G2_ST7920_128X64_1_SW_SPI u8g2(U8G2_R0, LCD_SCK , LCD_MOSI, LCD_CS);

void setup() {
  /* Setup buzzer */
  //pinMode(BUZZER_PIN, OUTPUT);
  //digitalWrite(BUZZER_PIN, LOW);

  /* Setup RAMPS LED */
  pinMode(LED_PIN, OUTPUT);

  /* Splash screen */
  u8g2.begin();
  do {
    /* u8g2.setDrawColor(1); */
    u8g2.setBitmapMode(1); // Transparent mode
    u8g2.drawXBM(22, 61, OXRAM_WIDTH, OXRAM_HEIGHT, oxram_logo_bits);
  } while ( u8g2.nextPage() );

  delay(3000);
}

void loop() {
  /* Use LED as feedback */
  if (millis() % 1000 < 500)
    digitalWrite(LED_PIN, HIGH);
  else
    digitalWrite(LED_PIN, LOW);

  /* Refresh screen */
  u8g2.firstPage();
  do {
    /* Chess pieces */
    u8g2.setFont(u8g2_font_unifont_t_symbols);
    u8g2.drawGlyph(6,      15, 0x2654);
    u8g2.drawGlyph(6+20,   15, 0x2655);
    u8g2.drawGlyph(6+20*2, 15, 0x2656);
    u8g2.drawGlyph(6+20*3, 15, 0x2657);
    u8g2.drawGlyph(6+20*4, 15, 0x2658);
    u8g2.drawGlyph(6+20*5, 15, 0x2659);

    /* Welcome screen */
    u8g2.setFont(u8g2_font_ncenB14_tr);
    u8g2.drawStr(0,39,"Hello OxRAM!");

    /* Chess pieces */
    u8g2.setFont(u8g2_font_unifont_t_symbols);
    u8g2.drawGlyph(6,      63, 0x265A);
    u8g2.drawGlyph(6+20,   63, 0x265B);
    u8g2.drawGlyph(6+20*2, 63, 0x265C);
    u8g2.drawGlyph(6+20*3, 63, 0x265D);
    u8g2.drawGlyph(6+20*4, 63, 0x265E);
    u8g2.drawGlyph(6+20*5, 63, 0x265F);
  } while ( u8g2.nextPage() );

  delay(500);
}
